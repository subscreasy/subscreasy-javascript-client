/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Authorization', 'model/AuthorizedServicesResponse', 'model/ChargingLog', 'model/Deduction', 'model/DeductionResult', 'model/InvoiceRequest', 'model/MessageTemplate', 'model/ServiceInstanceResult', 'model/ServiceOfferingResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Authorization'), require('../model/AuthorizedServicesResponse'), require('../model/ChargingLog'), require('../model/Deduction'), require('../model/DeductionResult'), require('../model/InvoiceRequest'), require('../model/MessageTemplate'), require('../model/ServiceInstanceResult'), require('../model/ServiceOfferingResult'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDocumentation) {
      root.ApiDocumentation = {};
    }
    root.ApiDocumentation.EndpointsApi = factory(root.ApiDocumentation.ApiClient, root.ApiDocumentation.Authorization, root.ApiDocumentation.AuthorizedServicesResponse, root.ApiDocumentation.ChargingLog, root.ApiDocumentation.Deduction, root.ApiDocumentation.DeductionResult, root.ApiDocumentation.InvoiceRequest, root.ApiDocumentation.MessageTemplate, root.ApiDocumentation.ServiceInstanceResult, root.ApiDocumentation.ServiceOfferingResult);
  }
}(this, function(ApiClient, Authorization, AuthorizedServicesResponse, ChargingLog, Deduction, DeductionResult, InvoiceRequest, MessageTemplate, ServiceInstanceResult, ServiceOfferingResult) {
  'use strict';

  /**
   * Endpoints service.
   * @module api/EndpointsApi
   * @version 1.0
   */

  /**
   * Constructs a new EndpointsApi. 
   * @alias module:api/EndpointsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authorizeUsingPUT operation.
     * @callback module:api/EndpointsApi~authorizeUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * authorize
     * @param {module:model/Authorization} authorization authorization
     * @param {module:api/EndpointsApi~authorizeUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.authorizeUsingPUT = function(authorization, callback) {
      var postBody = authorization;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling authorizeUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/authorize', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deductUsingPUT operation.
     * @callback module:api/EndpointsApi~deductUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeductionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deduct
     * @param {module:model/Deduction} deduction deduction
     * @param {module:api/EndpointsApi~deductUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeductionResult}
     */
    this.deductUsingPUT = function(deduction, callback) {
      var postBody = deduction;

      // verify the required parameter 'deduction' is set
      if (deduction === undefined || deduction === null) {
        throw new Error("Missing the required parameter 'deduction' when calling deductUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeductionResult;

      return this.apiClient.callApi(
        '/api/deduct', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizedServicesUsingGET operation.
     * @callback module:api/EndpointsApi~getAuthorizedServicesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizedServicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAuthorizedServices
     * @param {String} secureId secureId
     * @param {module:api/EndpointsApi~getAuthorizedServicesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizedServicesResponse}
     */
    this.getAuthorizedServicesUsingGET = function(secureId, callback) {
      var postBody = null;

      // verify the required parameter 'secureId' is set
      if (secureId === undefined || secureId === null) {
        throw new Error("Missing the required parameter 'secureId' when calling getAuthorizedServicesUsingGET");
      }


      var pathParams = {
        'secureId': secureId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AuthorizedServicesResponse;

      return this.apiClient.callApi(
        '/api/service/subscriber/{secureId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChargingLogBySubscriptionUsingGET operation.
     * @callback module:api/EndpointsApi~getChargingLogBySubscriptionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChargingLog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getChargingLogBySubscription
     * @param {Number} id id
     * @param {module:api/EndpointsApi~getChargingLogBySubscriptionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChargingLog>}
     */
    this.getChargingLogBySubscriptionUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChargingLogBySubscriptionUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [ChargingLog];

      return this.apiClient.callApi(
        '/api/charging-logs/subscription/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerTotalAmountUsingGET operation.
     * @callback module:api/EndpointsApi~getCustomerTotalAmountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCustomerTotalAmount
     * @param {String} id id
     * @param {module:api/EndpointsApi~getCustomerTotalAmountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.getCustomerTotalAmountUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomerTotalAmountUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/api/customer-totalAmountCharge/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoiceDetailsUsingGET operation.
     * @callback module:api/EndpointsApi~getInvoiceDetailsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getInvoiceDetails
     * @param {module:model/InvoiceRequest} invoiceRequest invoiceRequest
     * @param {module:api/EndpointsApi~getInvoiceDetailsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getInvoiceDetailsUsingGET = function(invoiceRequest, callback) {
      var postBody = invoiceRequest;

      // verify the required parameter 'invoiceRequest' is set
      if (invoiceRequest === undefined || invoiceRequest === null) {
        throw new Error("Missing the required parameter 'invoiceRequest' when calling getInvoiceDetailsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/getInvoiceDetails', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessageTemplateUsingGET operation.
     * @callback module:api/EndpointsApi~getMessageTemplateUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMessageTemplate
     * @param {String} lifecycleEventName lifecycleEventName
     * @param {module:api/EndpointsApi~getMessageTemplateUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageTemplate}
     */
    this.getMessageTemplateUsingGET = function(lifecycleEventName, callback) {
      var postBody = null;

      // verify the required parameter 'lifecycleEventName' is set
      if (lifecycleEventName === undefined || lifecycleEventName === null) {
        throw new Error("Missing the required parameter 'lifecycleEventName' when calling getMessageTemplateUsingGET");
      }


      var pathParams = {
        'lifecycleEventName': lifecycleEventName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = MessageTemplate;

      return this.apiClient.callApi(
        '/api/message-templates/email/{lifecycleEventName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceInstancesBySubscriptionUsingGET operation.
     * @callback module:api/EndpointsApi~getServiceInstancesBySubscriptionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceInstanceResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getServiceInstancesBySubscription
     * @param {Number} id id
     * @param {module:api/EndpointsApi~getServiceInstancesBySubscriptionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceInstanceResult>}
     */
    this.getServiceInstancesBySubscriptionUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getServiceInstancesBySubscriptionUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [ServiceInstanceResult];

      return this.apiClient.callApi(
        '/api/service-instances/subscription/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceOfferingsBySubscriptionPlanUsingGET operation.
     * @callback module:api/EndpointsApi~getServiceOfferingsBySubscriptionPlanUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceOfferingResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getServiceOfferingsBySubscriptionPlan
     * @param {Number} id id
     * @param {module:api/EndpointsApi~getServiceOfferingsBySubscriptionPlanUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceOfferingResult>}
     */
    this.getServiceOfferingsBySubscriptionPlanUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getServiceOfferingsBySubscriptionPlanUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [ServiceOfferingResult];

      return this.apiClient.callApi(
        '/api/service-offerings/offer/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTotalRevenuePerMonthUsingGET operation.
     * @callback module:api/EndpointsApi~getTotalRevenuePerMonthUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTotalRevenuePerMonth
     * @param {Number} id id
     * @param {module:api/EndpointsApi~getTotalRevenuePerMonthUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.getTotalRevenuePerMonthUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTotalRevenuePerMonthUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/api/charging-logs-totalamount-customer/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
