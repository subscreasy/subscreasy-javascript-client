/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ManagedUserVM', 'model/ResponseEntity', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ManagedUserVM'), require('../model/ResponseEntity'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDocumentation) {
      root.ApiDocumentation = {};
    }
    root.ApiDocumentation.UserResourceApi = factory(root.ApiDocumentation.ApiClient, root.ApiDocumentation.ManagedUserVM, root.ApiDocumentation.ResponseEntity, root.ApiDocumentation.User);
  }
}(this, function(ApiClient, ManagedUserVM, ResponseEntity, User) {
  'use strict';

  /**
   * UserResource service.
   * @module api/UserResourceApi
   * @version 1.0
   */

  /**
   * Constructs a new UserResourceApi. 
   * @alias module:api/UserResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUserUsingPOST operation.
     * @callback module:api/UserResourceApi~createUserUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createUser
     * @param {module:model/ManagedUserVM} managedUserVM managedUserVM
     * @param {module:api/UserResourceApi~createUserUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntity}
     */
    this.createUserUsingPOST = function(managedUserVM, callback) {
      var postBody = managedUserVM;

      // verify the required parameter 'managedUserVM' is set
      if (managedUserVM === undefined || managedUserVM === null) {
        throw new Error("Missing the required parameter 'managedUserVM' when calling createUserUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResponseEntity;

      return this.apiClient.callApi(
        '/api/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserUsingDELETE operation.
     * @callback module:api/UserResourceApi~deleteUserUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteUser
     * @param {String} login login
     * @param {module:api/UserResourceApi~deleteUserUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUserUsingDELETE = function(login, callback) {
      var postBody = null;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling deleteUserUsingDELETE");
      }


      var pathParams = {
        'login': login
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/users/{login}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsersUsingGET operation.
     * @callback module:api/UserResourceApi~getAllUsersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllUsers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number of the requested page
     * @param {Number} opts.size Size of a page
     * @param {Array.<String>} opts.sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {module:api/UserResourceApi~getAllUsersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.getAllUsersUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
      };
      var collectionQueryParams = {
        'sort': {
          value: opts['sort'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/api/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthoritiesUsingGET operation.
     * @callback module:api/UserResourceApi~getAuthoritiesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAuthorities
     * @param {module:api/UserResourceApi~getAuthoritiesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getAuthoritiesUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/api/users/authorities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProfileUsingGET operation.
     * @callback module:api/UserResourceApi~getUserProfileUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getUserProfile
     * @param {module:api/UserResourceApi~getUserProfileUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUserProfileUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/users/profile', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserUsingGET operation.
     * @callback module:api/UserResourceApi~getUserUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getUser
     * @param {String} login login
     * @param {module:api/UserResourceApi~getUserUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUserUsingGET = function(login, callback) {
      var postBody = null;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling getUserUsingGET");
      }


      var pathParams = {
        'login': login
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/users/{login}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCurrentUserUsingPUT operation.
     * @callback module:api/UserResourceApi~updateCurrentUserUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCurrentUser
     * @param {module:model/ManagedUserVM} userDTO userDTO
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id 
     * @param {String} opts.name 
     * @param {String} opts.streetAddress 
     * @param {String} opts.postalCode 
     * @param {String} opts.city 
     * @param {String} opts.stateProvince 
     * @param {String} opts.country 
     * @param {Number} opts.id2 
     * @param {String} opts.name2 
     * @param {String} opts.streetAddress2 
     * @param {String} opts.postalCode2 
     * @param {String} opts.city2 
     * @param {String} opts.stateProvince2 
     * @param {String} opts.country2 
     * @param {module:api/UserResourceApi~updateCurrentUserUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.updateCurrentUserUsingPUT = function(userDTO, opts, callback) {
      opts = opts || {};
      var postBody = userDTO;

      // verify the required parameter 'userDTO' is set
      if (userDTO === undefined || userDTO === null) {
        throw new Error("Missing the required parameter 'userDTO' when calling updateCurrentUserUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'streetAddress': opts['streetAddress'],
        'postalCode': opts['postalCode'],
        'city': opts['city'],
        'stateProvince': opts['stateProvince'],
        'country': opts['country'],
        'id': opts['id2'],
        'name': opts['name2'],
        'streetAddress': opts['streetAddress2'],
        'postalCode': opts['postalCode2'],
        'city': opts['city2'],
        'stateProvince': opts['stateProvince2'],
        'country': opts['country2'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/users/current', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserUsingPUT operation.
     * @callback module:api/UserResourceApi~updateUserUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateUser
     * @param {module:model/ManagedUserVM} managedUserVM managedUserVM
     * @param {module:api/UserResourceApi~updateUserUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.updateUserUsingPUT = function(managedUserVM, callback) {
      var postBody = managedUserVM;

      // verify the required parameter 'managedUserVM' is set
      if (managedUserVM === undefined || managedUserVM === null) {
        throw new Error("Missing the required parameter 'managedUserVM' when calling updateUserUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/users', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
