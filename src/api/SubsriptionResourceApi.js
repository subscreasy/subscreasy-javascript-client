/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Cancellation', 'model/StartSubscriptionRequest', 'model/StartSubscriptionResult', 'model/Subsription'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Cancellation'), require('../model/StartSubscriptionRequest'), require('../model/StartSubscriptionResult'), require('../model/Subsription'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDocumentation) {
      root.ApiDocumentation = {};
    }
    root.ApiDocumentation.SubsriptionResourceApi = factory(root.ApiDocumentation.ApiClient, root.ApiDocumentation.Cancellation, root.ApiDocumentation.StartSubscriptionRequest, root.ApiDocumentation.StartSubscriptionResult, root.ApiDocumentation.Subsription);
  }
}(this, function(ApiClient, Cancellation, StartSubscriptionRequest, StartSubscriptionResult, Subsription) {
  'use strict';

  /**
   * SubsriptionResource service.
   * @module api/SubsriptionResourceApi
   * @version 1.0
   */

  /**
   * Constructs a new SubsriptionResourceApi. 
   * @alias module:api/SubsriptionResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelSubscriptionUsingPUT operation.
     * @callback module:api/SubsriptionResourceApi~cancelSubscriptionUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subsription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancelSubscription
     * @param {module:model/Cancellation} cancellation cancellation
     * @param {module:api/SubsriptionResourceApi~cancelSubscriptionUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subsription}
     */
    this.cancelSubscriptionUsingPUT = function(cancellation, callback) {
      var postBody = cancellation;

      // verify the required parameter 'cancellation' is set
      if (cancellation === undefined || cancellation === null) {
        throw new Error("Missing the required parameter 'cancellation' when calling cancelSubscriptionUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Subsription;

      return this.apiClient.callApi(
        '/api/subscriptions/cancel', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActiveSubscriptionsUsingGET operation.
     * @callback module:api/SubsriptionResourceApi~getActiveSubscriptionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Subsription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActiveSubscriptions
     * @param {String} secureId secureId
     * @param {module:api/SubsriptionResourceApi~getActiveSubscriptionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Subsription>}
     */
    this.getActiveSubscriptionsUsingGET = function(secureId, callback) {
      var postBody = null;

      // verify the required parameter 'secureId' is set
      if (secureId === undefined || secureId === null) {
        throw new Error("Missing the required parameter 'secureId' when calling getActiveSubscriptionsUsingGET");
      }


      var pathParams = {
        'secureId': secureId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [Subsription];

      return this.apiClient.callApi(
        '/api/subsriptions/subscriber/{secureId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCompanySubscriptionsUsingGET operation.
     * @callback module:api/SubsriptionResourceApi~getAllCompanySubscriptionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Subsription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllCompanySubscriptions
     * @param {String} id id
     * @param {module:api/SubsriptionResourceApi~getAllCompanySubscriptionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Subsription>}
     */
    this.getAllCompanySubscriptionsUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllCompanySubscriptionsUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [Subsription];

      return this.apiClient.callApi(
        '/api/subscriptions/company/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubsriptionUsingGET operation.
     * @callback module:api/SubsriptionResourceApi~getSubsriptionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subsription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSubsription
     * @param {Number} id id
     * @param {module:api/SubsriptionResourceApi~getSubsriptionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subsription}
     */
    this.getSubsriptionUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSubsriptionUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Subsription;

      return this.apiClient.callApi(
        '/api/subsriptions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startSubscriptionUsingPOST operation.
     * @callback module:api/SubsriptionResourceApi~startSubscriptionUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * startSubscription
     * @param {module:model/StartSubscriptionRequest} request request
     * @param {module:api/SubsriptionResourceApi~startSubscriptionUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartSubscriptionResult}
     */
    this.startSubscriptionUsingPOST = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling startSubscriptionUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StartSubscriptionResult;

      return this.apiClient.callApi(
        '/api/subscriptions/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
