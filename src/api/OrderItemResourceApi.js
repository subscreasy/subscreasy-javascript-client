/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OrderItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/OrderItem'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDocumentation) {
      root.ApiDocumentation = {};
    }
    root.ApiDocumentation.OrderItemResourceApi = factory(root.ApiDocumentation.ApiClient, root.ApiDocumentation.OrderItem);
  }
}(this, function(ApiClient, OrderItem) {
  'use strict';

  /**
   * OrderItemResource service.
   * @module api/OrderItemResourceApi
   * @version 1.0
   */

  /**
   * Constructs a new OrderItemResourceApi. 
   * @alias module:api/OrderItemResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createOrderItemUsingPOST operation.
     * @callback module:api/OrderItemResourceApi~createOrderItemUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createOrderItem
     * @param {module:model/OrderItem} orderItem orderItem
     * @param {module:api/OrderItemResourceApi~createOrderItemUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderItem}
     */
    this.createOrderItemUsingPOST = function(orderItem, callback) {
      var postBody = orderItem;

      // verify the required parameter 'orderItem' is set
      if (orderItem === undefined || orderItem === null) {
        throw new Error("Missing the required parameter 'orderItem' when calling createOrderItemUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = OrderItem;

      return this.apiClient.callApi(
        '/api/order-items', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrderItemUsingDELETE operation.
     * @callback module:api/OrderItemResourceApi~deleteOrderItemUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteOrderItem
     * @param {Number} id id
     * @param {module:api/OrderItemResourceApi~deleteOrderItemUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrderItemUsingDELETE = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrderItemUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/order-items/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllOrderItemsUsingGET operation.
     * @callback module:api/OrderItemResourceApi~getAllOrderItemsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllOrderItems
     * @param {module:api/OrderItemResourceApi~getAllOrderItemsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderItem>}
     */
    this.getAllOrderItemsUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [OrderItem];

      return this.apiClient.callApi(
        '/api/order-items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderItemUsingGET operation.
     * @callback module:api/OrderItemResourceApi~getOrderItemUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrderItem
     * @param {Number} id id
     * @param {module:api/OrderItemResourceApi~getOrderItemUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderItem}
     */
    this.getOrderItemUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrderItemUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = OrderItem;

      return this.apiClient.callApi(
        '/api/order-items/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderItemUsingPUT operation.
     * @callback module:api/OrderItemResourceApi~updateOrderItemUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrderItem
     * @param {module:model/OrderItem} orderItem orderItem
     * @param {module:api/OrderItemResourceApi~updateOrderItemUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderItem}
     */
    this.updateOrderItemUsingPUT = function(orderItem, callback) {
      var postBody = orderItem;

      // verify the required parameter 'orderItem' is set
      if (orderItem === undefined || orderItem === null) {
        throw new Error("Missing the required parameter 'orderItem' when calling updateOrderItemUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = OrderItem;

      return this.apiClient.callApi(
        '/api/order-items', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
