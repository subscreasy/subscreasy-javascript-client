/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Subscriber from '../com.kodfarki.subscreasy.client.model/Subscriber';

/**
* SubscriberResource service.
* @module com.kodfarki.subscreasy.client/SubscriberResourceApi
* @version 1.0.0
*/
export default class SubscriberResourceApi {

    /**
    * Constructs a new SubscriberResourceApi. 
    * @alias module:com.kodfarki.subscreasy.client/SubscriberResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSubscriberUsingPOST operation.
     * @callback module:com.kodfarki.subscreasy.client/SubscriberResourceApi~createSubscriberUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:com.kodfarki.subscreasy.client.model/Subscriber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createSubscriber
     * @param {module:com.kodfarki.subscreasy.client.model/Subscriber} subscriber subscriber
     * @param {module:com.kodfarki.subscreasy.client/SubscriberResourceApi~createSubscriberUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.kodfarki.subscreasy.client.model/Subscriber}
     */
    createSubscriberUsingPOST(subscriber, callback) {
      let postBody = subscriber;
      // verify the required parameter 'subscriber' is set
      if (subscriber === undefined || subscriber === null) {
        throw new Error("Missing the required parameter 'subscriber' when calling createSubscriberUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Subscriber;
      return this.apiClient.callApi(
        '/api/subscribers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubscriberUsingDELETE operation.
     * @callback module:com.kodfarki.subscreasy.client/SubscriberResourceApi~deleteSubscriberUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteSubscriber
     * @param {Number} id id
     * @param {module:com.kodfarki.subscreasy.client/SubscriberResourceApi~deleteSubscriberUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubscriberUsingDELETE(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSubscriberUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/subscribers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllSubscribersUsingGET operation.
     * @callback module:com.kodfarki.subscreasy.client/SubscriberResourceApi~findAllSubscribersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:com.kodfarki.subscreasy.client.model/Subscriber>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findAllSubscribers
     * @param {module:com.kodfarki.subscreasy.client/SubscriberResourceApi~findAllSubscribersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:com.kodfarki.subscreasy.client.model/Subscriber>}
     */
    findAllSubscribersUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Subscriber];
      return this.apiClient.callApi(
        '/api/subscribers/find-all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSubscribersUsingGET operation.
     * @callback module:com.kodfarki.subscreasy.client/SubscriberResourceApi~getAllSubscribersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:com.kodfarki.subscreasy.client.model/Subscriber>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllSubscribers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number of the requested page
     * @param {Number} opts.size Size of a page
     * @param {Array.<String>} opts.sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {module:com.kodfarki.subscreasy.client/SubscriberResourceApi~getAllSubscribersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:com.kodfarki.subscreasy.client.model/Subscriber>}
     */
    getAllSubscribersUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Subscriber];
      return this.apiClient.callApi(
        '/api/subscribers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriberByEmailUsingGET operation.
     * @callback module:com.kodfarki.subscreasy.client/SubscriberResourceApi~getSubscriberByEmailUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:com.kodfarki.subscreasy.client.model/Subscriber>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSubscriberByEmail
     * @param {String} email email
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number of the requested page
     * @param {Number} opts.size Size of a page
     * @param {Array.<String>} opts.sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {module:com.kodfarki.subscreasy.client/SubscriberResourceApi~getSubscriberByEmailUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:com.kodfarki.subscreasy.client.model/Subscriber>}
     */
    getSubscriberByEmailUsingGET(email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getSubscriberByEmailUsingGET");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Subscriber];
      return this.apiClient.callApi(
        '/api/subscribers/email/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriberByNameUsingGET operation.
     * @callback module:com.kodfarki.subscreasy.client/SubscriberResourceApi~getSubscriberByNameUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:com.kodfarki.subscreasy.client.model/Subscriber>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSubscriberByName
     * @param {String} name name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number of the requested page
     * @param {Number} opts.size Size of a page
     * @param {Array.<String>} opts.sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {module:com.kodfarki.subscreasy.client/SubscriberResourceApi~getSubscriberByNameUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:com.kodfarki.subscreasy.client.model/Subscriber>}
     */
    getSubscriberByNameUsingGET(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getSubscriberByNameUsingGET");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Subscriber];
      return this.apiClient.callApi(
        '/api/subscribers/name/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriberBySecureIdUsingGET operation.
     * @callback module:com.kodfarki.subscreasy.client/SubscriberResourceApi~getSubscriberBySecureIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:com.kodfarki.subscreasy.client.model/Subscriber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSubscriberBySecureId
     * @param {String} secureId secureId
     * @param {module:com.kodfarki.subscreasy.client/SubscriberResourceApi~getSubscriberBySecureIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.kodfarki.subscreasy.client.model/Subscriber}
     */
    getSubscriberBySecureIdUsingGET(secureId, callback) {
      let postBody = null;
      // verify the required parameter 'secureId' is set
      if (secureId === undefined || secureId === null) {
        throw new Error("Missing the required parameter 'secureId' when calling getSubscriberBySecureIdUsingGET");
      }

      let pathParams = {
        'secureId': secureId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Subscriber;
      return this.apiClient.callApi(
        '/api/subscribers/secureId/{secureId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriberUsingGET operation.
     * @callback module:com.kodfarki.subscreasy.client/SubscriberResourceApi~getSubscriberUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:com.kodfarki.subscreasy.client.model/Subscriber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSubscriber
     * @param {Number} id id
     * @param {module:com.kodfarki.subscreasy.client/SubscriberResourceApi~getSubscriberUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.kodfarki.subscreasy.client.model/Subscriber}
     */
    getSubscriberUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSubscriberUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Subscriber;
      return this.apiClient.callApi(
        '/api/subscribers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscriberUsingPUT operation.
     * @callback module:com.kodfarki.subscreasy.client/SubscriberResourceApi~updateSubscriberUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:com.kodfarki.subscreasy.client.model/Subscriber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateSubscriber
     * @param {module:com.kodfarki.subscreasy.client.model/Subscriber} subscriber subscriber
     * @param {module:com.kodfarki.subscreasy.client/SubscriberResourceApi~updateSubscriberUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.kodfarki.subscreasy.client.model/Subscriber}
     */
    updateSubscriberUsingPUT(subscriber, callback) {
      let postBody = subscriber;
      // verify the required parameter 'subscriber' is set
      if (subscriber === undefined || subscriber === null) {
        throw new Error("Missing the required parameter 'subscriber' when calling updateSubscriberUsingPUT");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Subscriber;
      return this.apiClient.callApi(
        '/api/subscribers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
