/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiDocumentation);
  }
}(this, function(expect, ApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiDocumentation.ChargingLog();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChargingLog', function() {
    it('should create an instance of ChargingLog', function() {
      // uncomment below and update the code to test ChargingLog
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be.a(ApiDocumentation.ChargingLog);
    });

    it('should have the property appliedCoupon (base name: "appliedCoupon")', function() {
      // uncomment below and update the code to test the property appliedCoupon
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property authCode (base name: "authCode")', function() {
      // uncomment below and update the code to test the property authCode
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property companyId (base name: "companyId")', function() {
      // uncomment below and update the code to test the property companyId
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property createDate (base name: "createDate")', function() {
      // uncomment below and update the code to test the property createDate
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property errorCode (base name: "errorCode")', function() {
      // uncomment below and update the code to test the property errorCode
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property errorText (base name: "errorText")', function() {
      // uncomment below and update the code to test the property errorText
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property invoiceId (base name: "invoiceId")', function() {
      // uncomment below and update the code to test the property invoiceId
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property jobId (base name: "jobId")', function() {
      // uncomment below and update the code to test the property jobId
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property parent (base name: "parent")', function() {
      // uncomment below and update the code to test the property parent
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property paymentGateway (base name: "paymentGateway")', function() {
      // uncomment below and update the code to test the property paymentGateway
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property paymentId (base name: "paymentId")', function() {
      // uncomment below and update the code to test the property paymentId
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property reason (base name: "reason")', function() {
      // uncomment below and update the code to test the property reason
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property serviceInstanceId (base name: "serviceInstanceId")', function() {
      // uncomment below and update the code to test the property serviceInstanceId
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property subscriberSecureId (base name: "subscriberSecureId")', function() {
      // uncomment below and update the code to test the property subscriberSecureId
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionId (base name: "subscriptionId")', function() {
      // uncomment below and update the code to test the property subscriptionId
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

    it('should have the property transactionId (base name: "transactionId")', function() {
      // uncomment below and update the code to test the property transactionId
      //var instane = new ApiDocumentation.ChargingLog();
      //expect(instance).to.be();
    });

  });

}));
