/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiDocumentation);
  }
}(this, function(expect, ApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiDocumentation.Subscriber();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Subscriber', function() {
    it('should create an instance of Subscriber', function() {
      // uncomment below and update the code to test Subscriber
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be.a(ApiDocumentation.Subscriber);
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property gsmNumber (base name: "gsmNumber")', function() {
      // uncomment below and update the code to test the property gsmNumber
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property identityNumber (base name: "identityNumber")', function() {
      // uncomment below and update the code to test the property identityNumber
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property ip (base name: "ip")', function() {
      // uncomment below and update the code to test the property ip
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property lastLoginDate (base name: "lastLoginDate")', function() {
      // uncomment below and update the code to test the property lastLoginDate
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property registrationDate (base name: "registrationDate")', function() {
      // uncomment below and update the code to test the property registrationDate
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property secureId (base name: "secureId")', function() {
      // uncomment below and update the code to test the property secureId
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property shippingAddress (base name: "shippingAddress")', function() {
      // uncomment below and update the code to test the property shippingAddress
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property shippingCity (base name: "shippingCity")', function() {
      // uncomment below and update the code to test the property shippingCity
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property shippingCountry (base name: "shippingCountry")', function() {
      // uncomment below and update the code to test the property shippingCountry
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property shippingName (base name: "shippingName")', function() {
      // uncomment below and update the code to test the property shippingName
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property shippingZipCode (base name: "shippingZipCode")', function() {
      // uncomment below and update the code to test the property shippingZipCode
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property surname (base name: "surname")', function() {
      // uncomment below and update the code to test the property surname
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property useBillingAddressForShipping (base name: "useBillingAddressForShipping")', function() {
      // uncomment below and update the code to test the property useBillingAddressForShipping
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

    it('should have the property zipCode (base name: "zipCode")', function() {
      // uncomment below and update the code to test the property zipCode
      //var instane = new ApiDocumentation.Subscriber();
      //expect(instance).to.be();
    });

  });

}));
